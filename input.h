#ifndef INPUT_H
#define INPUT_H

// All buttons are active high, with pull-down resistors to hold them low
// Push = When hit once, triggers a function at a rising edge signal
// Hold = When held down, selects and displays a specific program state
// Switch = Sets program options depending on logic high or low
// Virtual buttons are used for input events generated by the code
enum BUTTON_BIT
{
    // PISO 1
    BTN_ALARM_TIMER_ON = 0, // PI1 (Switch)
    BTN_ENCODER     = 1,  // PI2 (Push)
    BTN_ALARM_SET   = 2,  // PI3 (Hold/Push)
    BTN_TIME_SET    = 3,  // PI4 (Hold)
    BTN_SEC_SET     = 4,  // PI5 (Hold)
    BTN_SENSOR      = 5,  // PI6 (Hold)
    
    // PISO 2
    BTN_VOLUME_SET  = 8,  // PI1 (Hold)
    BTN_TUNE_SET    = 9,  // PI2 (Hold)
    BTN_BRIGHT_SET  = 10, // PI3 (Hold)
    BTN_SNOOZE      = 11, // PI4 (Hold/Push)
    
    // virtual buttons
    BTN_ENCODER_CW  = 13,
    BTN_ENCODER_CCW = 14,
    BTN_NONE        = 15
};

// Buttons that cannot be pushed simultaneously
#define BTN_HOLD_MASK ( \
    (1<<BTN_ALARM_SET)  | \
    (1<<BTN_TIME_SET)   | \
    (1<<BTN_SEC_SET)    | \
    (1<<BTN_SENSOR)     | \
    (1<<BTN_VOLUME_SET) | \
    (1<<BTN_SNOOZE))

    //(1<<BTN_TUNE_SET)   | \
    //(1<<BTN_BRIGHT_SET) | \

#define ENCODER_CCW 0
#define ENCODER_CW  1
#define ENC_MAX_EVENTS 15

#endif/* INPUT_H */
